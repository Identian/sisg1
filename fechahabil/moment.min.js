/* constantes globales */
const festivosFijos = ['1/1','1/5','20/7','7/8','8/12','25/12']
const festivosTrasladables = ['6/1','19/3','29/6','15/8','12/10','1/11','11/11']
// TODO: agregar valores pascua..
const festivosPascua = {'2021':'Apr 4th'}

/* funcion dias habiles */
function calcularDiasHabiles(fechaDesde, fechaHasta) {
    // fecha desde - hasta
    let fechaInicio = moment(fechaDesde, 'DD/MM/YYYY'), fechaFin = moment(fechaHasta, 'DD/MM/YYYY'), dias = 0
    let anioIncio = fechaInicio.year()
    let aniosDiferencia = fechaFin.diff(fechaInicio, 'years')
    const festivosT = calcularFestivosTrasladables(anioIncio,aniosDiferencia)
    const festivosF = calcularFestivosFijos(anioIncio,aniosDiferencia)
    const festivosP = calcularFestivosPascua(anioIncio,aniosDiferencia)
    // recorrer fechas
    while (!fechaInicio.isAfter(fechaFin)) {  
      const festivo =  fechaInicio.date() + "/" + (fechaInicio.month() + 1);
      // No incluir fines de semana,No incluir festivos trasladables
      if (
        fechaInicio.isoWeekday() !== 6 && 
        fechaInicio.isoWeekday() !== 7 && 
        festivosT[fechaInicio.year()].includes(festivo) !== true && 
        festivosF[fechaInicio.year()].includes(festivo) !== true &&
        festivosP[fechaInicio.year()].includes(festivo) !== true 
      ) {
        dias++;
      }

      fechaInicio.add(1, 'days')
    }
    return dias-1;
}

function calcularFestivosPascua(anioIncio,aniosDiferencia){
  let totalFestivosPascua = {}
  if(aniosDiferencia>0){
    for (let i = 0; i <= aniosDiferencia; i++) {
      totalFestivosPascua[anioIncio+i]= obtenerArregloPascua(anioIncio+i)
    }
  }else{
    totalFestivosPascua[anioIncio] = obtenerArregloPascua(anioIncio)
  }
  console.log('totalFestivosPascua:: ',totalFestivosPascua);
  return totalFestivosPascua
}

function obtenerArregloPascua(anioIncio){
    const JSanto  = moment(festivosPascua[anioIncio],"MMM-DD-YYYY").add(-3,'days').format('D/M');
    const VSanto = moment(festivosPascua[anioIncio],"MMM-DD-YYYY").add(-2,'days').format('D/M');
    const AJesus = moment(festivosPascua[anioIncio],"MMM-DD-YYYY").add(43,'days').format('D/M');
    const CChristi = moment(festivosPascua[anioIncio],"MMM-DD-YYYY").add(64,'days').format('D/M');
    const SCorazon = moment(festivosPascua[anioIncio],"MMM-DD-YYYY").add(71,'days').format('D/M');
    return [JSanto,VSanto,AJesus,CChristi,SCorazon]
}

function calcularFestivosFijos(anioIncio,aniosDiferencia){
    let totalFestivosFijos = {}
    if(aniosDiferencia>0){
      for (let i = 0; i <= aniosDiferencia; i++) {
        totalFestivosFijos[anioIncio+i]=festivosFijos
      }
    }else{
      totalFestivosFijos[anioIncio] =festivosFijos
    }
    console.log('totalFestivosFijos:: ',totalFestivosFijos);
    return totalFestivosFijos
}

function calcularFestivosTrasladables(anioIncio,aniosDiferencia){
    let totalFestivosTrasladables = {}
    if(aniosDiferencia>0){
      for (let i = 0; i <= aniosDiferencia; i++) {
        totalFestivosTrasladables[anioIncio+i]=obtenerArregloFT(anioIncio+i)
      }
    }else{
      totalFestivosTrasladables[anioIncio]=obtenerArregloFT(anioIncio)
    }
    console.log('totalFestivosTrasladables:: ',totalFestivosTrasladables);
    return totalFestivosTrasladables
}

function obtenerArregloFT(anioIncio){
    let AFT = festivosTrasladables.slice();
    festivosTrasladables.forEach(festivoT =>{
      const fechaInicio = festivoT+'/'+anioIncio 
      const fechaFT = moment(fechaInicio, 'DD/MM/YYYY')
      // si el festivo trasladable no es lunes
      if (fechaFT.isoWeekday() !== 1){
        let diasDiferencia = fechaFT.isoWeekday();    
        diasDiferencia = 8 - diasDiferencia;

        const nuevaFechaFT = fechaFT.add(diasDiferencia,'days') ;
        const fechaFTArreglo =  nuevaFechaFT.date() + "/" + (nuevaFechaFT.month() + 1);
        const posicionDestino = AFT.indexOf(festivoT);
        AFT[posicionDestino] = fechaFTArreglo;
      }
    })
    return AFT;
}

var diaInicio = '5/02/2021'
var diaFin = '30/03/2021'

var dias = calcularDiasHabiles(diaInicio, diaFin)

console.log('Dias habiles:: de '+diaInicio+' a '+diaFin+' :: ', dias);
